package nez.cc;

import nez.lang.And;
import nez.lang.AnyChar;
import nez.lang.ByteChar;
import nez.lang.ByteMap;
import nez.lang.Capture;
import nez.lang.Choice;
import nez.lang.Empty;
import nez.lang.Expression;
import nez.lang.Failure;
import nez.lang.Link;
import nez.lang.New;
import nez.lang.NonTerminal;
import nez.lang.Not;
import nez.lang.Option;
import nez.lang.Production;
import nez.lang.Repetition;
import nez.lang.Repetition1;
import nez.lang.Replace;
import nez.lang.Sequence;
import nez.lang.Tagging;

class JavaParserGenerator extends GrammarGenerator {
	JavaParserGenerator(String fileName) {
		super(fileName);
	}

	@Override
	public String getDesc() {
		return "a Nez parser generator for Java" ;
	}

	@Override
	public void makeHeader() {
		file.write("// The following is generated by the Nez Grammar Generator ");
		file.writeIndent("class P {");
		file.incIndent();
	}
	
	@Override
	public void makeFooter() {
		file.decIndent();
		file.writeIndent("}");
	}

	String name(Production rule) {
		return rule.getLocalName();
	}
	
	@Override
	public void visitRule(Production rule) {
		file.writeIndent("public final static boolean " + name(rule) + "(SourceContext c) {");
		file.incIndent();
		visit(rule.getExpression());
		file.writeIndent("return false;");
		file.decIndent();
		file.writeIndent("}");
	}	
	
	public void visitEmpty(Empty e) {

	}

	public void visitFailure(Failure e) {
		file.write("return true;");
	}

	public void visitNonTerminal(NonTerminal e) {
		file.writeIndent("if("+ name(e.getRule()) + "(c)) return true;");
	}
	
	public void visitByteChar(ByteChar e) {
		file.writeIndent("if(nMatch(c, " + e.byteChar + ")) return true;");
	}

	public void visitByteMap(ByteMap e) {
		file.writeIndent("if(nMatch(c, bitmap" + e.getId() + ")) return true;");
		visitLazy(e);
	}
	
	public void visitAnyChar(AnyChar e) {
		file.write("_");
	}

	public void visitOption(Option e) {
		//this.visit( null, e, "?");
		visitLazy(e);
	}
	
	public void visitRepetition(Repetition e) {
		//this.visit(null, e, "*");
	}
	
	public void visitRepetition1(Repetition1 e) {
		//this.visit(null, e, "+");
	}

	public void visitAnd(And e) {
		//this.visit( "&", e, null);
	}
	
	public void visitNot(Not e) {
		//this.visit( "!", e, null);
	}

	public void visitSequence(Sequence e) {
		//this.visitSequenceImpl(e);
	}
	
	public void visitChoice(Choice e) {
		for(int i = 0; i < e.size(); i++) {
			if(i > 0) {
				file.write(" / ");
			}
			visit(e.get(i));
		}
	}
	
	public void visitNew(New e) {

	}

	public void visitCapture(Capture e) {
		
	}

	public void visitTagging(Tagging e) {
		file.write("/*#");
		file.write(e.tag.toString());
		file.write("*/");
	}
	
	public void visitValue(Replace e) {
		//file.write(StringUtils.quoteString('`', e.value, '`'));
	}
	
	public void visitLink(Link e) {
//		String predicate = "@";
//		if(e.index != -1) {
//			predicate += "[" + e.index + "]";
//		}
//		this.visit(predicate, e, null);
		this.visit(e.get(0));
	}

	@Override
	public void visitUndefined(Expression e) {
		file.write("/* Mouse Unsupported <");
		file.write(e.getPredicate());
		for(Expression se : e) {
			file.write(" ");
			visit(se);
		}
		file.write("> */");
	}

	
	private void visitLazy(Expression e) {
		
	}
}