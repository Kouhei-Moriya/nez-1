package nez.generator;

import nez.Parser;
import nez.lang.Expression;
import nez.lang.Production;
import nez.lang.expr.Pand;
import nez.lang.expr.Cany;
import nez.lang.expr.Cbyte;
import nez.lang.expr.Cset;
import nez.lang.expr.Tcapture;
import nez.lang.expr.Pchoice;
import nez.lang.expr.Tlink;
import nez.lang.expr.Tnew;
import nez.lang.expr.NonTerminal;
import nez.lang.expr.Pnot;
import nez.lang.expr.Poption;
import nez.lang.expr.Pzero;
import nez.lang.expr.Pone;
import nez.lang.expr.Treplace;
import nez.lang.expr.Psequence;
import nez.lang.expr.Ttag;

public class PEGTLGenerator extends GrammarGenerator {

	@Override
	public String getDesc() {
		return "Parsing Expression Grammar Template Library for C++11";
	}

	public void makeHeader(Parser g) {
		L("// The following is generated by the Nez Grammar Generator ");
		L("#include<pegtl.hh>");

		for (Production p : g.getProductionList()) {
			L("struct " + _NonTerminal(p) + ";");
		}

	}

	public void makeFooter(Parser g) {

	}

	protected String _NonTerminal(Production p) {
		return "p" + p.getLocalName().replace("~", "_").replace("!", "NOT").replace(".", "DOT");
	}

	protected String _Open() {
		return "<";
	};

	protected String _Close() {
		return ">";
	};

	protected String _Delim() {
		return ",";
	};

	public void visitGrouping(Expression e) {
		// W(_OpenGrouping());
		visitExpression(e);
		// W(_CloseGrouping());
	}

	@Override
	public void visitProduction(Production p) {
		Expression e = p.getExpression();
		L("struct " + _NonTerminal(p) + " : ");
		inc();
		L("");
		W("pegtl::seq<");
		visitExpression(e);
		W(", pegtl::success> {};");
		dec();
	}

	public void visitPempty(Expression e) {
		C("pegtl::success");
	}

	public void visitPfail(Expression e) {
		C("pegtl::failure");
	}

	public void visitNonTerminal(NonTerminal e) {
		W(_NonTerminal(e.getProduction()));
	}

	public void visitCbyte(Cbyte e) {
		C("pegtl::one", e.byteChar);
	}

	public void visitCset(Cset e) {
		C("pegtl::one", e.byteMap);
	}

	public void visitString(String s) {
		int cnt = 0;
		W("pegtl::string").W(_Open());
		for (int c = 0; c < s.length(); c++) {
			if (cnt > 0) {
				W(_Delim());
			}
			W(String.valueOf((int) s.charAt(c)));
			cnt++;
		}
		W(_Close());
	}

	public void visitCany(Cany e) {
		W("pegtl::any");
	}

	public void visitPoption(Poption e) {
		C("pegtl::opt", e);
	}

	public void visitPzero(Pzero e) {
		C("pegtl::star", e);
	}

	public void visitPone(Pone e) {
		C("pegtl::plus", e);
	}

	public void visitPand(Pand e) {
		C("pegtl::at", e);
	}

	public void visitPnot(Pnot e) {
		C("pegtl::not_at", e);
	}

	public void visitPchoice(Pchoice e) {
		C("pegtl::sor", e);
	}

	public void visitPsequence(Psequence e) {
		W("pegtl::seq<");
		super.visitPsequence(e);
		W(">");
	}

	public void visitTnew(Tnew e) {
		W("pegtl::success");
		// if(e.lefted) {
		// C("LCapture", e.shift);
		// }
		// else {
		// C("NCapture", e.shift);
		// }
	}

	public void visitTcapture(Tcapture e) {
		W("pegtl::success");
		// C("Capture", e.shift);
	}

	public void visitTtag(Ttag e) {
		W("pegtl::success");
		// C("Tagging", e.getTagName());
	}

	public void visitTreplace(Treplace e) {
		W("pegtl::success");
		// C("Replace", StringUtils.quoteString('"', e.value, '"'));
	}

	public void visitTlink(Tlink e) {
		// if(e.index != -1) {
		// C("Link", String.valueOf(e.index), e);
		// }
		// else {
		// C("Link", e);
		// }
		visitExpression(e.get(0));
	}

	@Override
	public void visitUndefined(Expression e) {
		if (e.size() > 0) {
			visitExpression(e.get(0));
		} else {
			W("pegtl::success");
		}
		// W("<");
		// W(e.getPredicate());
		// for(Expression se : e) {
		// W(" ");
		// visit(se);
		// }
		// W(">");
	}

}
