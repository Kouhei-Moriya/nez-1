package nez.generator;

import nez.Parser;
import nez.lang.Expression;
import nez.lang.Production;
import nez.lang.expr.Uand;
import nez.lang.expr.Cany;
import nez.lang.expr.Cbyte;
import nez.lang.expr.Cset;
import nez.lang.expr.Tcapture;
import nez.lang.expr.Pchoice;
import nez.lang.expr.Tlink;
import nez.lang.expr.Tnew;
import nez.lang.expr.NonTerminal;
import nez.lang.expr.Unot;
import nez.lang.expr.Uoption;
import nez.lang.expr.Uzero;
import nez.lang.expr.Uone;
import nez.lang.expr.Treplace;
import nez.lang.expr.Psequence;
import nez.lang.expr.Ttag;

public class PegjsGrammarGenerator extends GrammarGenerator {

	@Override
	public String getDesc() {
		return "generate a PEGjs Grammar";
	}

	public void makeHeader(Parser g) {
		L("// The following is generated by the Nez Grammar Generator ");

	}

	public void makeFooter(Parser g) {

	}

	protected String _NonTerminal(Production p) {
		return p.getLocalName();
	}

	protected String _Open() {
		return "<";
	};

	protected String _Close() {
		return ">";
	};

	protected String _Delim() {
		return ",";
	};

	public void visitGrouping(Expression e) {
		W(_OpenGrouping());
		visitExpression(e);
		W(_CloseGrouping());
	}

	@Override
	public void visitProduction(Production p) {
		Expression e = p.getExpression();
		L(_NonTerminal(p));
		inc();
		L("= ");
		visitExpression(e);
		L();
		dec();
	}

	public void visitEmpty(Expression e) {
	}

	public void visitFailure(Expression e) {
	}

	public void visitNonTerminal(NonTerminal e) {
		W("" + _NonTerminal(e.getProduction()));
	}

	public String stringfyByte(int byteChar) {
		char c = (char) byteChar;
		switch (c) {
		case '\n':
			return ("'\\n'");
		case '\t':
			return ("'\\t'");
		case '\r':
			return ("'\\r'");
		case '\"':
			return ("\"\\\"\"");
		case '\\':
			return ("'\\\\'");
		}
		return "\"" + c + "\"";
	}

	public void visitByteChar(Cbyte e) {
		W(this.stringfyByte(e.byteChar));
	}

	private int searchEndChar(boolean[] b, int s) {
		for (; s < 256; s++) {
			if (!b[s]) {
				return s - 1;
			}
		}
		return 255;
	}

	private void getRangeChar(byte ch, StringBuilder sb) {
		char c = (char) ch;
		switch (c) {
		case '\n':
			sb.append("\\n");
			break;
		case '\t':
			sb.append("'\\t'");
			break;
		case '\r':
			sb.append("'\\r'");
			break;
		case '\'':
			sb.append("'\\''");
			break;
		case '\"':
			sb.append("\"");
			break;
		case '\\':
			sb.append("'\\\\'");
			break;
		}
		sb.append(c);
	}

	public void visitByteMap(Cset e) {
		W("[");
		boolean b[] = e.byteMap;
		for (int start = 0; start < 256; start++) {
			if (b[start]) {
				int end = searchEndChar(b, start + 1);
				if (start == end) {
					W(this.stringfyByte(start));
				} else {
					StringBuilder sb = new StringBuilder();
					getRangeChar((byte) start, sb);
					sb.append("-");
					getRangeChar((byte) end, sb);
					W(sb.toString());
					start = end;
				}
			}
		}
		W("]");
	}

	public void visitString(String s) {
	}

	public void visitAnyChar(Cany e) {
		W(".");
	}

	public void visitOption(Uoption e) {
		for (Expression sub : e) {
			visitExpression(sub);
		}
		W("?");
	}

	public void visitRepetition(Uzero e) {
		for (Expression sub : e) {
			visitExpression(sub);
		}
		W("*");
	}

	public void visitRepetition1(Uone e) {
		for (Expression sub : e) {
			visitExpression(sub);
		}
		W("+");
	}

	public void visitAnd(Uand e) {
		W("&");
		for (Expression sub : e) {
			visitExpression(sub);
		}
	}

	public void visitNot(Unot e) {
		W("!");
		for (Expression sub : e) {
			visitExpression(sub);
		}
	}

	public void visitChoice(Pchoice e) {
		int checkFirst = 0;
		W("(");
		for (Expression sub : e) {
			if (checkFirst > 0) {
				L("/ ");
			}
			visitExpression(sub);
			checkFirst++;
		}
		W(")");
	}

	public void visitSequence(Psequence e) {
		W("(");
		for (Expression sub : e) {
			visitExpression(sub);
			W(" ");
		}
		W(")");
	}

	public void visitNew(Tnew e) {
		for (Expression sub : e) {
			visitExpression(sub);
		}
	}

	public void visitCapture(Tcapture e) {
	}

	public void visitTagging(Ttag e) {
	}

	public void visitReplace(Treplace e) {
	}

	public void visitLink(Tlink e) {
		// if(e.index != -1) {
		// C("Link", String.valueOf(e.index), e);
		// }
		// else {
		// C("Link", e);
		// }
		visitExpression(e.get(0));
	}

	@Override
	public void visitUndefined(Expression e) {
		if (e.size() > 0) {
			visitExpression(e.get(0));
		} else {
		}
		// W("<");
		// W(e.getPredicate());
		// for(Expression se : e) {
		// W(" ");
		// visit(se);
		// }
		// W(">");
	}

}
